<div class="container">
    <div id="map"></div>
    <div id="pano"></div>
</div>


<!--map layout
    Landmark (small) for each image, onclick image should display, also predictions
    Line for video (Later)
    Heatmap (source: csv file or table in database (?@nischal), fetch records dynamically, near to location)-->

<!-- 
 <script>
    var mymap = L.map('map').setView([14.0823695,100.6126375], 13);

    googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3']
    });
    googleStreets.addTo(mymap)

    // fetch get near_ima_and_anns(lat, long)
    // return 50 records of {lat: 14.0822, lng:100.61300, image_name: '', image_id: 11111, count: 1}

    // don't forget to include leaflet-heatmap.js
    var testData = {
    max: 2,
    data: [{lat: 14.0823695, lng:100.6126375, count: 3},{lat: 14.0822, lng:100.61300, count: 1}]
    };

    var cfg = {
    // radius should be small ONLY if scaleRadius is true (or small radius is intended)
    // if scaleRadius is false it will be the constant radius used in pixels
    "radius": 0.1,
    "maxOpacity": .5,
    // scales the radius based on map zoom
    "scaleRadius": true,
    // if set to false the heatmap uses the global maximum for colorization
    // if activated: uses the data maximum within the current map boundaries
    //   (there will always be a red spot with useLocalExtremas true)
    "useLocalExtrema": true,
    // which field name in your data represents the latitude - default "lat"
    latField: 'lat',
    // which field name in your data represents the longitude - default "lng"
    lngField: 'lng',
    // which field name in your data represents the data value - default "value"
    valueField: 'count'
    };


    var heatmapLayer = new HeatmapOverlay(cfg);
    heatmapLayer.setData(testData);
    heatmapLayer.addTo(mymap)


    window.onresize = doALoadOfStuff;
    
    function doALoadOfStuff() {
        //do a load of stuff
        // alert("working")
       setTimeout(function(){ mymap.invalidateSize()}, 400);
    }

//     L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
//     attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
//     maxZoom: 18,
//     id: 'mapbox/streets-v11',
//     tileSize: 512,
//     zoomOffset: -1,
//     accessToken: 'your.mapbox.access.token'
// }).addTo(mymap);
</script>
 <br>
<div id="map" style="height: 500px; border: 1px solid #AAA;"></div>

Use the map to visualize plastic litter according to pLitter’s predictions on the dataset’s user submitted images. The heatmap will help you to understand the plastic litter count and perform litter hotspot analysis. User submitted images are tagged as markers on map.

Want to map plastic waste in your city? Become a volunteer! -->

<!--
<div>
    <p> Still in developing. Idea is to visualize plastic pollution along streets with heatmap. User can select on heatmap and see teh ground truth images used to generate the heatmap at corresponding locations.</p>
    <p> At present we are using leaflet for map. Please check out git repository to contribute.</p>
</div> 

<h3 align="center">under MAINTENANCE</h3> -->













<!-- // tying with google map below -->

<style>
    /* html,
body {
height: 100%;
margin: 0;
padding: 0;
} */

#map,
#pano {
float: left;
height: 100%;
width: 50%;
}
</style>
<!-- jsFiddle will insert css and js -->


<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script>
        function initialize() {
  const fenway = { lat: 14.0860644, lng: 100.6083957 };
  const map = new google.maps.Map(document.getElementById("map"), {
    center: fenway,
    zoom: 14,
  });
  const panorama = new google.maps.StreetViewPanorama(  
    document.getElementById("pano"),
    {
      position: fenway,
      pov: {
        heading: 34,
        pitch: 10,
      },
    }
  );
  map.setStreetView(panorama);
}
    </script>





<!-- Async script executes immediately and must be after any DOM elements used in callback. -->
<!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initialize&libraries=&v=weekly" async></script>  -->
<script src="https://maps.googleapis.com/maps/api/js?key=" async></script>  













