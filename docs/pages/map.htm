<div id="map_container">

  <div id="leaflet_map"> </div>

</div>

<style>
  #leaflet_map{ height: 500px; }


  #map_container {
    margin: 50px;
  }
</style>

<script>

  var mymap = L.map("leaflet_map").setView([ 14.014359204645759, 100.61305046081544], 13);
  var tileLayer = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
    accessToken: 'pk.eyJ1IjoibmlzY2hhbGIiLCJhIjoiY2tydDN2OWJzMWQ5YTJ0cGZuZDU4cXptcCJ9.93a5e6uSq2ta0ATUyhBZTw'
})

tileLayer.addTo(mymap);

const MARKERS = L.markerClusterGroup();
const MARKERS_BY_ID = {};

mymap.on('moveend', async function(e) {
  mymap.eachLayer(function (layer) {
    if (layer._leaflet_id != tileLayer._leaflet_id) mymap.removeLayer(layer);
  });

  var data = await getImagesAndClusters(mymap.getBounds());
  console.log("Got data:", data);

  var imageCount = 0;
  data?.images?.forEach((image, index) => {
      if (imageCount > 300)  return;
    imageCount++;

      let prevId = data.images[index == 0 ? data.images.length - 1 : index - 1].id;
      let nextId = data.images[index == data.images.length - 1 ? 0 : index + 1].id;

      console.log(image)
      addImageToMap(mymap, image.location.coordinates[1], image.location.coordinates[0], image.id, prevId, nextId);
  });

  data?.clusters?.forEach((cluster, index) => {
    // check if image of cluster
    addClusterToMap(mymap, cluster.latitude, cluster.longitude, cluster.count);
  });
});

function addClusterToMap(map, xCoordinate, yCoordinate, count) {
  // todo: add count text
  var circle = L.circleMarker([xCoordinate, yCoordinate], {
    color: 'red',
    fillColor: '#f03',
    fillOpacity: 0.2,
    radius: 10
  }).addTo(mymap);
}

function addImageToMap(map, xCoordinate, yCoordinate, imageId, prevId, nextId) {
  let marker = L.marker([xCoordinate, yCoordinate]).addTo(map);

  let popupHtml = `
  <img src="${imageIdToUrl(imageId)}" style="max-width: 200px; max-height: 200px">
  <span onclick="MARKERS_BY_ID['${prevId}'].openPopup()">prev</span>
  <span onclick="MARKERS_BY_ID['${nextId}'].openPopup()">next</span>
  `;
  marker.bindPopup(popupHtml);

  MARKERS_BY_ID[imageId] = marker;

  function imageIdToUrl(id) {
    const BASE_URL = "https://annotator.ait.ac.th/api/image/";
    return BASE_URL + id;
  }
}

async function getImagesAndClusters(bounds) {
  console.log(bounds._northEast);
  console.log(bounds._southWest);

  var left = bounds._southWest.lng;
  var top = bounds._northEast.lat;
  var right = bounds._northEast.lng;
  var bottom = bounds._southWest.lat;


  let response = await fetch("https://annotator.ait.ac.th/api/image/map", {
    "headers": {
      "accept": "application/json",
      "accept-language": "en-US,en;q=0.9",
      "content-type": "application/json",
      "sec-gpc": "1"
    },
    "referrer": "http://203.159.29.187:5000/api/",
    "referrerPolicy": "strict-origin-when-cross-origin",
    "body": JSON.stringify({ "left": left, "top": top, "right": right, "bottom": bottom, "zoom": mymap.getZoom() }),
    "method": "POST",
    "mode": "cors",
    "credentials": "include"
  });

  let data = response.json();

  return data;
}

</script>
