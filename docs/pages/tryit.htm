<div id="container" style="padding: 20px; text-align: center;">
    <form style="height: 500px" action="UploadImages" class="dropzone" style="text-align: center;" id="demo-dropzone"
      enctype="multipart/form-data">
      <div class="dz-message" data-dz-message><span>Select or drop image to predict plastic litter.</span></div>
    </form>
  
    <div id="imgDiv" style="position:relative; display: none">
      <!-- <img id="salad" width="500" crossorigin="anonymous" src="https://storage.googleapis.com/tfjs-testing/tfjs-automl/object_detection/test_image.jpg" /> -->
      <img id="input" width=100% height="500px" crossorigin="anonymous"  />
      <svg width=100% height="500px" style="position: absolute;top:0;left:0;">
        <style>
          .box {
            stroke-width: 2;
            fill: none;
            stroke: red;
          }
          .label {
            font-size: 12px;
            fill: white;
            text-anchor: middle;
          }
          .label-rect {
            fill: black;
          }
        </style>
      </svg>
    <br>
    <button id="clear-image" style="padding: 10px; margin: 10px;"> Clear Image </button>
    </div>
  </div>
  
    <strong>Note:</strong>
  
    <p>Interested in improving pLitter predictions? </p>
  
    <div>
      <ul>
        <li>Visit the Upload section and uplaod your images/videos of plastic litter to help grow the dataset.</li>
        <li>Visit the Annotate section to label images for pLitter. </li>
      </ul>
      <!-- <p>Add description if needed here.</p> -->
    </div>
  
    <h1>Sample video inference,</h1>
  
  <div style="display: flex; justify-content: center;">
      <iframe width=100% height="500px" src="https://www.youtube.com/embed/vKwIo96Tddg"></iframe>
  </div>
  
    <script>
    
        // change file for license issue
const osvg = document.querySelector('svg');
// const MODEL_URL = 'tfjs/model.json'
async function run() {
    alert("Start predicting pLitter! it might take few seconds to make inefrences")
    const model = await tf.automl.loadObjectDetection(MODEL_URL);
    const image = document.getElementById('input');
    alert("model loaded")
    // These are the default options.
    const options = {score: 0.2, iou: 0.5, topk: 20};
    const predictions = await model.detect(image, options);
    alert(predictions)
    // Show the resulting object on the page.
    const pre = document.createElement('pre');
    pre.textContent = JSON.stringify(predictions, null, 2);
    // document.body.append(pre);

    drawBoxes(predictions);
}

// Overlays boxes with labels onto the image using `rect` and `text` svg
// elements.
function drawBoxes(predictions) {
    const svg = document.querySelector('svg');
    predictions.forEach(prediction => {
    const {box, label, score} = prediction;
    const {left, top, width, height} = box;
    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    rect.setAttribute('width', width);
    rect.setAttribute('height', height);
    rect.setAttribute('x', left);
    rect.setAttribute('y', top);
    rect.setAttribute('class', 'box');
    rect.setAttribute('id', 'box');
    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    text.setAttribute('x', left + width / 2);
    text.setAttribute('y', top);
    text.setAttribute('dy', 1);
    text.setAttribute('dx', 1);
    text.setAttribute('class', 'label');
    text.setAttribute('id', 'label');
    text.textContent = `${label.substring(0, 9)}: ${score.toFixed(2)}`;
    svg.appendChild(rect);
    svg.appendChild(text);
    const textBBox = text.getBBox();
    const textRect =
        document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    textRect.setAttribute('x', textBBox.x);
    textRect.setAttribute('y', textBBox.y);
    textRect.setAttribute('width', textBBox.width);
    textRect.setAttribute('height', textBBox.height);
    textRect.setAttribute('class', 'label-rect');
    textRect.setAttribute('id', 'label-rect');
    svg.insertBefore(textRect, text);
    });
}

// run();


var loadFile = function (event) {
  // var svg = document.querySelector('svg');
  while (rect = document.getElementById("box")) {
    rect.remove()
  }
  while (label = document.getElementById("label")) {
    label.remove()
  }
  while (label_rect = document.getElementById("label-rect")) {
    label_rect.remove()
  }
  var image = document.getElementById('input');
  // image.onload = run()
  image.src = URL.createObjectURL(event.target.files[0]);
  // SavePhoto(event.target)
  // run();
};



        
      $("#clear-image").click(() => {
        $('#demo-dropzone').css("display", "");
        $('#imgDiv').css("display", "none");
      });
  
      $("#demo-dropzone").dropzone({
        autoProcessQueue: false,
        maxFiles: 1,
        init: function() {
          this.on("addedfile", (file) => {
            $('.dz-progress').css("display", "none");
  
            while (rect = document.getElementById("box") ) { rect.remove() }
            while (label = document.getElementById("label")) { label.remove() }
            while (label_rect = document.getElementById("label-rect")) { label_rect.remove() }
  
            var image = document.getElementById('input');
            image.onload = () => run();
            image.src = URL.createObjectURL(file);
  
            this.removeAllFiles();
            $('#demo-dropzone').css("display", "none");
            $('#imgDiv').css("display", "");
          })
      }});
    </script>
